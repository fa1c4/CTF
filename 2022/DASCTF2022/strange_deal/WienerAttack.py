import gmpy2
import libnum


def continued_fraction(numerator, denominator):
    cf = []
    while denominator:
        cf.append(numerator // denominator)
        numerator, denominator = denominator, numerator % denominator
    return cf

def gradual_fraction(cf):
    numerator = 0
    denominator = 1
    for x in cf[::-1]:
        numerator, denominator = denominator, x * denominator + numerator
    return numerator, denominator

def solve_quadratic(a, b, c):
    discriminant = gmpy2.isqrt(b * b - 4 * a * c)
    return (-b + discriminant) // (2 * a), (-b - discriminant) // (2 * a)

def get_gradual_fractions(cf):
    gradual_fracs = []
    for i in range(1, len(cf) + 1):
        gradual_fracs.append(gradual_fraction(cf[:i]))
    return gradual_fracs

def wiener_attack(e, n):
    cf = continued_fraction(e, n)
    gradual_fracs = get_gradual_fractions(cf)
    for d, k in gradual_fracs:
        if k == 0: continue
        if (e * d - 1) % k != 0:
            continue
        phi = (e * d - 1) // k
        p, q = solve_quadratic(1, n - phi + 1, n)
        if p * q == n:
            return d


if __name__ == '__main__':
    n = 12702192797044914024075774649965354105344232304099465264316470282606351700311177624703682814557100043599414982439635470829841890299241342602374578366076034128412992290094164613120745611751102797279925764448133764246126488845600641524814194290745105708735258127757986238766868988676022258542038318776640732920027324986285887310132372524224961045858183153047991881042129131551711617627844146600513830709959185824512201669420128585170924683844128155435146399996585220865423125338735154727569986267948480523307784641442521735105741341230032585576300299944879647981670048377150556292280650846158185797588466680532743801893
    e = 12680615221091469696163926483122992106481999501435284497098601343706982733487916553201934931961274845294041438909951977672521864927961654544622905443692482152403380984734291652023321187458458985625147422841102922314725726207365632256563373977251725785357590588556314671253970422319546403985257810950046085994573229162322957630767327089195523762665081311711474689269184996318744510300057603532953644164998953897411177604349567514705039306693117602798453972917348902600111420473965929048876821563646206875034926505783009957256212261250539005023918242209009676914632796839852778318989278092929214021282438144809708279435
    c = 10610336534759505889607399322387179316771488492347274741918862678692508953185876570981227584004676580623553664818853686933004290078153620168054665086468417541382824708104480882577200529822968531743002301934310349005341104696887943182074473298650903541494918266823037984054778903666406545980557074219162536057146090758158128189406073809226361445046225524917089434897957301396534515964547462425719205819342172669899546965221084098690893672595962129879041507903210851706793788311452973769358455761907303633956322972510500253009083922781934406731633755418753858930476576720874219359466503538931371444470303193503733920039

    d = wiener_attack(e, n)
    m = pow(c, d, n)
    print(libnum.n2s(m).decode())
